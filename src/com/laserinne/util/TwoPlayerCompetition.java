/*
 *                This file is part of Laserinne.
 * 
 *  Laser projections in public space, inspiration and
 *  information, exploring the aesthetic and interactive possibilities of
 *  laser-based displays.
 * 
 *  http://www.laserinne.com/
 * 
 * Laserinne is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Laserinne is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Laserinne. If not, see <http://www.gnu.org/licenses/>.
 */

package com.laserinne.util;

import geomerative.RFont;

/**
 * Abstract superclass for games/competitions for two players.
 * 
 * You are supposed to extend this to get some of the ready made functionality
 * for competitions/games for two players.
 * 
 * Remember: When you've overridden a method you almost always want to call the
 * superclass method as the first call in your method! This gives you the
 * benefits of having the functionality that's already there in your sketch as
 * well.
 * 
 * @author Jyrki Lilja
 */

public abstract class TwoPlayerCompetition extends LaserinneSketch {
    /**
     * Generated by Jyrki Lilja on 2011-09-15 14.04
     */
    private static final long serialVersionUID = 3126395842985338753L;
    
    /**
     * Left and right skier contestants.
     */
    protected SkierContestant leftSkier;
    protected SkierContestant rightSkier;

    /**
     * Start and finish lines. These determine when to start / finish the race
     * for skier.
     */
    protected static final int START_LINE = 20;
    protected static final int FINISH_LINE = 460;
    
    /**
     * Laser scan speed used during the game.
     */
    public static final int GAME_SCANSPEED = 12000;
    
    public void setup() {
        super.setup();
        
        /*
         * Tracking with default settings.
         */
        tracking = new ContestantTracking();
        
        /*
         * Set SkierContestant ready for use.
         */
        SkierContestant.startLine(TwoPlayerCompetition.START_LINE);
        SkierContestant.finishLine(TwoPlayerCompetition.FINISH_LINE);
    }
    
    public void draw() {
        super.draw();
        
        line(width / 2, 0, width / 2, height);
        line(0, TwoPlayerCompetition.START_LINE, width, TwoPlayerCompetition.START_LINE);
        line(0, TwoPlayerCompetition.FINISH_LINE, width, TwoPlayerCompetition.FINISH_LINE);
        
        /*
         * Set both skiers according to tracking.
         * Tracking gives us basically left and right skiers. They *must* not
         * cross to the other track or they *might* cause confusion.
         */
        leftSkier.skier(((ContestantTracking) tracking).firstSkierInRect(0, 0, width / 2, height));
        rightSkier.skier(((ContestantTracking) tracking).firstSkierInRect(width / 2, 0, width, height));
    }
    
    /**
     * Prepares the laser to draw different types of info and call the
     * method(s) that draw stuff.
     */
    protected void drawWithLaser() {
        stroke(TwoPlayerCompetition.LASER_COLOR);
        beginRaw(laserRenderer);
        if (leftSkier.finished() && rightSkier.finished()) {
            /*
             * Display winner.
             * Using high scan speed in hopes to provide non-flickering text.
             */
            laser.output().setScanSpeed(TwoPlayerCompetition.TEXT_SCANSPEED);
            laserRenderer.noSmooth();
            String finishNote = SkierContestant.winner(leftSkier, rightSkier);
            pushMatrix();
            translate(width / 2, height / 2);
            int fontAlign = font.align;
            int fontSize = font.size;
            font.setAlign(RFont.CENTER);
            font.setSize(40);
            drawText(finishNote);
            font.setAlign(fontAlign);
            font.setSize(fontSize);
            popMatrix();
        } else {
            /*
             * Display game.
             * Use slower scan speed since shapes are quite easy to draw.
             */
            laser.output().setScanSpeed(TwoPlayerCompetition.GAME_SCANSPEED);
            this.drawGame();
        }
        endRaw();
        stroke(TwoPlayerCompetition.SCREEN_COLOR);
    }
    
    /**
     * Abstract method to draw the game field with laser. Everything that is
     * supposed to be drawn *in game mode* should be in this. The winner
     * drawing is provided by this class.
     */
    protected abstract void drawGame();
    
    /**
     * Abstract method to generate new game. Override this to generate paths.
     * Reset is called automatically after this on ``n'' key press. You *have*
     * to call both ``newGame()'' and ``reset()'' in the end of ``setup()''.
     */
    abstract protected void newGame();
    
    /**
     * Reset skiers. Override this to reset other stuff in your game.
     */
    protected void reset() {
        super.reset();
        leftSkier.reset();
        rightSkier.reset();
    }
    
    /**
     * Handle keypresses
     */
    public void keyPressed() {
        super.keyPressed();
        if (key == 'n') {
            newGame();
            reset();
        }
    }
}
