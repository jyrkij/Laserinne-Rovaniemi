/*
 *                This file is part of Laserinne.
 * 
 *  Laser projections in public space, inspiration and
 *  information, exploring the aesthetic and interactive possibilities of
 *  laser-based displays.
 * 
 *  http://www.laserinne.com/
 * 
 * Laserinne is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Laserinne is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Laserinne. If not, see <http://www.gnu.org/licenses/>.
 */

package com.laserinne.util;

import geomerative.RFont;
import laserschein.Laser3D;
import laserschein.Laserschein;

import com.laserinne.snakerun.SnakeRun;

/**
 * Abstract superclass for games/competitions for two players.
 * 
 * You are supposed to extend this to get some of the ready made functionality
 * for competitions/games for two players.
 * 
 * Remember: When you've overridden a method you almost always want to call the
 * superclass method as the first call in your method! This gives you the
 * benefits of having the functionality that's already there in your sketch as
 * well.
 * 
 * @author Jyrki Lilja
 */

public abstract class TwoPlayerCompetition extends processing.core.PApplet {
    /**
     * Generated by Jyrki Lilja on 2011-09-15 14.04
     */
    private static final long serialVersionUID = 3126395842985338753L;
    
    /**
     * A member to make it easy to programmatically switch laser on and off.
     */
    protected boolean laserOn = false;
    /**
     * Holds an instance of Laserschein.
     */
    protected Laserschein laser;
    /**
     * Holds an instance of the laser renderer.
     */
    protected Laser3D laserRenderer;
    /**
     * Tracking that gives basically left and right skiers. They *must* not
     * cross to the other track or they *might* cause confusion.
     */
    protected ContestantTracking tracking;
    /**
     * RFont used for displaying both the FPS (on screen) and the winner
     * (on laser).
     */
    protected RFont font;
    
    /**
     * Left and right skier contestants.
     */
    protected SkierContestant leftSkier;
    protected SkierContestant rightSkier;

    /**
     * Start and finish lines. These determine when to start / finish the race
     * for skier.
     */
    protected static final int START_LINE = 20;
    protected static final int FINISH_LINE = 460;
    /**
     * Sketch width and height.
     */
    protected static final int WIDTH = 640;
    protected static final int HEIGHT = 480;
    
    /**
     * Laser color: ARGB(FF, 00, FF, 00) means full intensity green.
     */
    public static final int LASER_COLOR = 0xFFFF0000;
    /**
     * Screen color: ARGB(FF, 00, 00, FF) means full intensity blue.
     */
    public static final int SCREEN_COLOR = 0xFF0000FF;
    
    /**
     * Laser scan speed used during the game.
     */
    public static final int GAME_SCANSPEED = 12000;
    /**
     * Laser scan speed used when displaying text.
     */
    public static final int TEXT_SCANSPEED = 60000;
    
    public void setup() {
        size(TwoPlayerCompetition.WIDTH, TwoPlayerCompetition.HEIGHT, processing.opengl.PGraphicsOpenGL.OPENGL);
        frameRate(-1); // Use maximum frame rate.
        
        /*
         * Tracking with default settings.
         */
        tracking = new ContestantTracking();
        
        /*
         * Set Skier class ready for use.
         */
        Skier.width(TwoPlayerCompetition.WIDTH);
        Skier.height(TwoPlayerCompetition.HEIGHT);
        
        /*
         * Set SkieContestant ready for use.
         */
        SkierContestant.startLine(TwoPlayerCompetition.START_LINE);
        SkierContestant.finishLine(TwoPlayerCompetition.FINISH_LINE);
        
        /*
         * Initialize RG and font.
         */
        geomerative.RG.init(this);
        font = new RFont("Laserfont.ttf", 80, RFont.CENTER);
        
        smooth();
        colorMode(RGB);
        stroke(TwoPlayerCompetition.SCREEN_COLOR);
        noFill();
    }
    
    public void draw() {
        background(0);
        stroke(SnakeRun.SCREEN_COLOR);
        
        /*
         * Rotate/skew code in place for adapting to the slope.
         */
        // float cameraZ = (float) ((height/2.0) / Math.tan(PI * 60.0 / 360.0));
        // perspective(PI / 3.0, width/height, cameraZ/10.0, cameraZ*10.0);
        
        float eyeX = width / 2.0f,
              eyeY = height / 2.0f,
              eyeZ = (float) ((height / 2.0) / Math.tan(PI * 60.0 / 360.0)),
              centerX = width / 2.0f,
              centerY = height / 2.0f,
              centerZ = 0,
              upX = 0,
              upY = 1,
              upZ = 0;
        camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        
        // rotateX(-PI * 1 / 3);
        
        /*
         * Draw FPS on screen
         */
        pushMatrix();
        translate(30, 80);
        font.setAlign(RFont.LEFT);
        font.draw(new Integer(Math.round(frameRate)).toString());
        popMatrix();
        
        line(width / 2, 0, width / 2, height);
        line(0, TwoPlayerCompetition.START_LINE, width, TwoPlayerCompetition.START_LINE);
        line(0, TwoPlayerCompetition.FINISH_LINE, width, TwoPlayerCompetition.FINISH_LINE);
        
        /*
         * Update tracking and set both skiers according to tracking.
         */
        tracking.update();
        leftSkier.skier(tracking.firstSkierInRect(0, 0, width / 2, height));
        rightSkier.skier(tracking.firstSkierInRect(width / 2, 0, width, height));
    }
    
    /**
     * Prepares the laser to draw different types of info and call the
     * method(s) that draw stuff.
     */
    protected void drawWithLaser() {
        stroke(SnakeRun.LASER_COLOR);
        beginRaw(laserRenderer);
        if (leftSkier.finished() && rightSkier.finished()) {
            /*
             * Display winner.
             * Using high scan speed in hopes to provide non-flickering text.
             */
            laser.output().setScanSpeed(SnakeRun.TEXT_SCANSPEED);
            laserRenderer.noSmooth();
            String finishNote = SkierContestant.winner(leftSkier, rightSkier);
            pushMatrix();
            translate(width / 2, height / 2);
            font.setAlign(RFont.CENTER);
            int fontSize = font.size;
            font.setSize(40);
            font.draw(finishNote);
            font.setSize(fontSize);
            popMatrix();
        } else {
            /*
             * Display game.
             * Use slower scan speed since shapes are quite easy to draw.
             */
            laser.output().setScanSpeed(SnakeRun.GAME_SCANSPEED);
            this.drawGame();
        }
        endRaw();
        stroke(SnakeRun.SCREEN_COLOR);
    }
    
    /**
     * Abstract method to draw the game field with laser. Everything that is
     * supposed to be drawn *in game mode* should be in this. The winner
     * drawing is provided by this class.
     */
    protected abstract void drawGame();
    
    /**
     * Abstract method to generate new game. Override this to generate paths.
     * Reset is called automatically after this on ``n'' key press. You *have*
     * to call both ``newGame()'' and ``reset()'' in the end of ``setup()''.
     */
    abstract protected void newGame();
    
    /**
     * Reset skiers. Override this to reset other stuff in your game.
     */
    protected void reset() {
        leftSkier.reset();
        rightSkier.reset();
    }
    
    /**
     * Method to toggle laser output. Destroys the laser when no output is
     * wished.
     */
    protected void toggleLaser() {
        if (laserOn) {
            /*
             * Dispose the laser.
             */
            laserRenderer.dispose();
            laserRenderer = null;
            laser.dispose();
            laser = null;
        } else {
            /*
             * Initialize laserschein for use with EasyLaseUSB2.
             */
            laser = new Laserschein(this, Laserschein.EASYLASEUSB2);
            laserRenderer = laser.renderer();
        }
        laserOn = !laserOn;
    }
    
    /**
     * Handle keypresses
     */
    public void keyPressed() {
        if (key == 'n') {
            newGame();
            reset();
        } else if (key == 'r') {
            // Reset positions
            reset();
        } else if (key == 'l') {
            // Switch laser on/off
            toggleLaser();
        }

    }
}
