/*
 *                This file is part of Laserinne.
 * 
 *  Laser projections in public space, inspiration and
 *  information, exploring the aesthetic and interactive possibilities of
 *  laser-based displays.
 * 
 *  http://www.laserinne.com/
 * 
 * Laserinne is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Laserinne is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Laserinne. If not, see <http://www.gnu.org/licenses/>.
 */

package com.laserinne.util;

import geomerative.RFont;
import geomerative.RGroup;
import geomerative.RPath;
import geomerative.RPoint;
import geomerative.RShape;
import laserschein.Laser3D;
import laserschein.Laserschein;
import processing.core.PApplet;

/**
 * Abstract superclass for Laserinne sketches.
 * 
 * You are supposed to extend this to get some of the ready made functionality
 * for sketches made to Levi.
 * 
 * Remember: When you've overridden a method you almost always want to call the
 * superclass method as the first call in your method! This gives you the
 * benefits of having the functionality that's already there in your sketch as
 * well.
 * 
 * @author Jyrki Lilja
 */

public abstract class LaserinneSketch extends PApplet {
    /**
     * Generated by Jyrki Lilja on 2011-09-27 11.38
     */
    private static final long serialVersionUID = 5151648775184165402L;
    
    /**
     * Holds an instance of Laserschein.
     */
    protected Laserschein laser;
    /**
     * Holds an instance of the laser renderer.
     */
    protected Laser3D laserRenderer;
    
    /**
     * Tracking gives us all skiers in the slope.
     */
    protected Tracking tracking;
    
    /**
     * RFont used for displaying both the FPS (on screen) and the winner
     * (on laser).
     */
    protected RFont font;
    
    /**
     * Used to toggle control window.
     */
    protected boolean controlWindowShown = false;
    
    /**
     * Sketch width and height.
     */
    protected static final int WIDTH = 480;
    protected static final int HEIGHT = 480;
    
    /**
     * Laser color: ARGB(FF, 00, FF, 00) means full intensity green.
     */
    public static final int LASER_COLOR = 0xFFFF0000;
    /**
     * Screen color: ARGB(FF, 00, 00, FF) means full intensity blue.
     */
    public static final int SCREEN_COLOR = 0xFF0000FF;

    /**
     * Laser scan speed used when displaying text.
     */
    public static final int TEXT_SCANSPEED = 60000;
    
    /**
     * Shake amount. Higher number will mean less exposure to the eye.
     */
    public static final float SHAKE_AMOUNT = 1.5f;
    
    public void setup() {
        size(TwoPlayerCompetition.WIDTH, TwoPlayerCompetition.HEIGHT, processing.opengl.PGraphicsOpenGL.OPENGL);
        frameRate(-1); // Use maximum frame rate.
        
        /*
         * Initialize laserschein for use with EasyLaseUSB2.
         */
        laser = new Laserschein(this, Laserschein.EASYLASEUSB2);
        laserRenderer = laser.renderer();
        
        /*
         * Set Skier class ready for use.
         */
        Skier.width(LaserinneSketch.WIDTH);
        Skier.height(LaserinneSketch.HEIGHT);
        
        /*
         * Initialize RG and font.
         */
        geomerative.RG.init(this);
        font = new RFont("FeltPen-Regular.ttf", 80, RFont.CENTER);
        
        smooth();
        colorMode(RGB);
        stroke(LaserinneSketch.SCREEN_COLOR);
        noFill();
    }
    
    public void draw() {
        background(0);
        stroke(TwoPlayerCompetition.SCREEN_COLOR);
        
        /*
         * Draw FPS on screen
         */
        pushMatrix();
        translate(30, 80);
        int fontAlign = font.align;
        font.setAlign(RFont.LEFT);
        drawText(new Integer(Math.round(frameRate)).toString());
        font.setAlign(fontAlign);
        popMatrix();
        
        /*
         * Shake the sketch so that it won't be projected on the same
         * coordinates all the time. This helps us reduce the amount of
         * intensity the eye receives.
         */
        translate(
                ((float) Math.random() - .5f) * LaserinneSketch.SHAKE_AMOUNT,
                ((float) Math.random() - .5f) * LaserinneSketch.SHAKE_AMOUNT);
        
        /*
         * Update tracking
         */
        if (tracking != null) tracking.update();
    }
    
    /**
     * Use this method to draw stuff with laser. Class TwoPlayerCompetition has
     * an example on how to use this.
     */
    protected abstract void drawWithLaser();
    
    /**
     * Draw text with laser using correct font (FeltPen-Regular.ttf)
     * @param text to be drawn
     */
    public void drawText(String text) {
        RGroup myFontGroup = font.toGroup(text);
        if (myFontGroup.elements != null) {
            for (int t = 0; t < myFontGroup.elements.length; t++) {
                RShape myFontShape = myFontGroup.elements[t].toShape();
                RPath[] myFontPath = myFontShape.paths;
                
                for (int f = 0; f < myFontPath.length; f++) {
                    RPoint[] myFontPoints = myFontPath[f].getHandles();
                    beginShape();
                    for (int p = 1; p < myFontPoints.length - 1; p++) {
                        vertex(myFontPoints[p].x, myFontPoints[p].y);
                    }
                    endShape();
                }
            }
        }
    }
    
    protected void reset() {
        
    }
    
    public void keyPressed() {
        if (key == 'r') {
            // Reset positions
            reset();
        } else if (key == 's') {
            // Toggle control window
            if (this.controlWindowShown) {
                this.laser.hideControlWindow();
                this.controlWindowShown = false;
            } else {
                this.laser.showControlWindow();
                this.controlWindowShown = true;
            }
        }
    }
}
