/*package com.laserinne.metaball;

import java.util.ArrayList;

import processing.core.PApplet;
import processing.core.PVector;
import processing.opengl.PGraphicsOpenGL;


public class Metaball extends PApplet {
    /**
     * Generated by Jyrki Lilja, 20110801-1405
     * /
    private static final long serialVersionUID = -761561219732095033L;
    
    private ArrayList<Ball> balls;
    private MetaballSystem metaballSystem;
    
    public void setup() {
        size(640, 480, PGraphicsOpenGL.OPENGL);
        frameRate(-1);
        balls = new ArrayList<Ball>();
        balls.add(new Ball(new PVector(350.0f, 100.0f), 3.0f));
        balls.add(new Ball(new PVector( 20.0f, 200.0f), 2.0f));
        balls.add(new Ball(new PVector(280.0f, 140.0f), 4.0f));
        balls.add(new Ball(new PVector(400.0f, 440.0f), 3.0f));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        balls.add(new Ball(new PVector(random(0, width), random(0, height)), random(0.5f, 5.0f)));
        
        metaballSystem = new MetaballSystem(balls, 1.3f, 0.05f);
    }

    public void draw() {
        background(0);
        
        balls.get(0).position(new PVector(mouseX, mouseY));
        
        stroke(255);
        drawBalls(metaballSystem, 2.0f);
    }
    
    private void drawBalls(MetaballSystem metaballSystem, float step) {
        balls = metaballSystem.balls();
        
        for (Ball ball : balls) {
            ball.initialPosition(
                metaballSystem.trackTheBorder(
                    PVector.add(ball.position(), new PVector(0, 1))
                )
            );
            ball.edgePosition(ball.initialPosition());
            ball.tracking(true);
        }
        
        PVector oldPosition;
        for (int i = 0; i < 1000; i++) {
            for (Ball ball : balls) {
                if (!ball.tracking()) {
                    continue;
                }
                oldPosition = ball.edgePosition();
              ball.edgePosition(
               PVector.add(
                ball.edgePosition(),
                PVector.mult(
                 metaballSystem.tangent(
                  PVector.add(
                   ball.edgePosition(),
                   PVector.mult(
                    metaballSystem.tangent(ball.edgePosition()),
                    step / 2
                   )
                  )
                 ),
                 step
                )
               )
              );
                
//                ball.edgePosition(
//                 PVector.add(
//                  ball.edgePosition(),
//                  PVector.mult(
//                   metaballSystem.tangent(ball.edgePosition()),
//                   step
//                  )
//                 )
//                );
                
                ball.edgePosition(metaballSystem.stepOnceTowardsBorder(ball.edgePosition()));
                line(oldPosition.x, oldPosition.y, ball.edgePosition().x, ball.edgePosition().y);
                
                for (Ball b : balls) {
                    if ((b != ball || i > 3) && PVector.sub(ball.initialPosition(), ball.edgePosition()).mag() < step)
                    ball.tracking(false);
                }
            }
            
            int tracking = 0;
            for (Ball b : balls) {
                if (b.tracking()) {
                    tracking++;
                }
            }
            if (tracking == 0) {
                break;
            }
        }
    }
    
    public static void main(String _args[]) {
        PApplet.main(new String[] { metaball.Metaball.class.getName() });
    }
}*/
